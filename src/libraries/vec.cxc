TwoNums {
    num_one: i64
    num_two: i64
}

two_nums_from_one(in: i64): TwoNums {
    two_nums: TwoNums = 0
    two_nums.num_one = in
    two_nums.num_two = in + 42

    ! two_nums
}

Vec<T> {
    data_loc: &T
    len: i64
    capacity: i64
    
    .push(val: T): i32 {
        ? self.len >= self.capacity + 0 {
            # reallocate memory
            self.capacity = self.capacity * to_i64(2)

            new_ptr: &T = alloc<T>(self.capacity)
            memmove<T>(self.data_loc, new_ptr, self.len * size_of<T>())
            free<T>(self.data_loc)
            self.data_loc = new_ptr
        }

        ptr: &T = self.data_loc + self.len
        ptr = val
        
        self.len = self.len + to_i64(1)

        ! 0 
    }

    .get(index: i64): T {
        ptr: &T = self.data_loc + index
        ! *ptr
    }
}

create_vec<T>(): Vec<T> {
    new_vec: Vec<T> = 0
    new_vec.len = to_i64(0)
    new_vec.capacity = to_i64(4)
    new_vec.data_loc = alloc<T>(new_vec.capacity)

    ! new_vec
}

test(): i32 {
    number_of_checks: i32 = 32

    num_vec: Vec<i32> = create_vec<i32>()
    two_num_vec: Vec<TwoNums> = create_vec<TwoNums>(two_nums_from_one(to_i64(0)))

    current_index: i32 = 0
    @ current_index < number_of_checks + 0 {
        x: i32 = num_vec.push<i32>(current_index)

        current_index = current_index + 1
    }

    current_index = 0
    @ current_index < number_of_checks + 0 {
        assert_eq<i32>(num_vec.get<i32>(to_i64(current_index)), current_index)

        current_index = current_index + 1
    }


    current_index: i64 = 0
    @ current_index < number_of_checks + 0 {
        x: i32 = two_num_vec.push<TwoNums>(two_nums_from_one(current_index))

        current_index = current_index + 1
    }

    current_index = 0
    @ current_index < number_of_checks + 0 {
        in_vec: TwoNums = two_num_vec.get<TwoNums>(current_index)
        corresponding: TwoNums = two_nums_from_one(current_index)

        assert_eq<i64>(in_vec.num_one, corresponding.num_one)
        assert_eq<i64>(in_vec.num_two, corresponding.num_two)

        current_index = current_index + 1
    }


    ! 0
}
