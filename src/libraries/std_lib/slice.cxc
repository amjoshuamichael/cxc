<T> { +ptr: &T, +len: u64 }:. {
    get(index: u64); T {
        ptr: &T = self.ptr.ptr_add(index)
        ; *ptr
    }

    get_ref(index: u64); &T {
        ptr: &T = self.ptr.ptr_add(index)
        ; ptr
    }

    into_iter(); SliceIter<T> {
        ; SliceIter<T> {
            ptr = self.len,
            end = self.ptr.ptr_add(self.len),
        }
    }

    slice(range: Range<u64>); Me {
        ; Me {
            ptr = self.ptr.ptr_add(range.start),
            len = range.end - range.start,
        }
    }
}

SliceIter<T> = {
    inner: {
        ptr: &T,
        end: &T,
    },
    it: &T,
}

<T> SliceIter<T>:. {
    none_remaining(); bool {
        ; self.ptr == self.end
    }

    next() {
        self.it = self.it.ptr_add(1)
    }
}
