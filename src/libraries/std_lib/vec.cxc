Vec<T> = {
    +raw: RawVec<T>,
    +len: u64,
}

RawVec<T> = {
    +ptr: &T,
    capacity: u64,
} ~ ? self.capacity != 0 { free(self.ptr) }

<T> &RawVec<T>:. {
    expand() {
        old_cap := self.capacity
        # reallocate memory
        self.capacity = self.capacity * 2
        
        new_ptr: &T = alloc<T>(self.capacity)
        memmove<T>(self.ptr, new_ptr, old_cap * size_of<T>())
        free<T>(self.ptr)
        
        self.ptr = new_ptr
    }
}

<T> RawVec<T>:: {
    empty(); Me {
        ; cast({-Me} { capacity = 0, -- })
    }

    alloc_count(count: u64); Me {
        ; cast({-Me} {
            ptr = alloc(count),
            capacity = 4,
        })
    }
}

<T> &Vec<T>:. {
    push(val: T) {
        ? self.capacity == u64 0 {
            *self = Vec<T> {
                raw = RawVec<T>:alloc_count(4),
                len = 0,
            }
        }

        ? self.len >= self.capacity {
            self.expand()
        }

        ptr: &T = self.ptr.ptr_add(self.len)
        *ptr = val

        self.len = self.len + u64 1
    }
}

<T> Vec<T>:. {
    cast_as_bytes(); Vec<u8> {
        self.len = self.len * size_of<T>()
        self.cap = self.cap * size_of<T>()

        ; cast(self)
    }
}

<T> Vec<T>:: {
    new(); Vec<T> {
        ; Vec<T> {
            raw = cast({
                ptr = cast<u64, &T>(u64 0),
                capacity = u64 0,
            }),
            len = u64 0,
        }
    }

    init_with(len: u64, obj: T); Vec<T> {
        ptr: &T = alloc<T>(len)

        o := 0

        @ o < len {
            *ptr.ptr_add(o) = obj
            
            o = o + 1
        }

        ; Vec<T> {
            raw = cast({
                ptr = ptr,
                capacity = len,
            }),
            len = len,
        }
    }

    with_capacity(cap: u64); Vec<T> {
        ; Vec<T> {
            len = 0,
            capacity = cap,
            ptr = alloc<T>(cap),
        }
    }

    default(); Vec<T> {
        ; Vec<T>:new()
    }
}

# TODO: this should be a static method of Vec, but generic static methods of generic types
# are broken
vec_from_arr<U>(arr: U); Vec<U[]> {
    vec := Vec<U[]> {
        raw = cast({
            ptr = alloc<U[]>(arr.len),
            capacity = arr.len,
        }),
        len = arr.len,
    }

    memcpy(arr.ptr, vec.ptr, vec.len * size_of<U[]>())

    ; vec
}

<T> &Vec<T>:. {
    drop() {
        free<T>(self.ptr)
    }
}

<T> Vec<T>:. {
    to_slice(); { +ptr: &T ~ free(self), +len: u64 } {
        new_memory := alloc<T>(self.len)
        memmove(self.ptr, new_memory, self.len * size_of<T>())

        ; {
            ptr = cast(new_memory),
            len = self.len,
        }
    }
}
