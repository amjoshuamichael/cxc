Vec<T> = {
    data_loc: &T,
    capacity: u64,
    len: u64,
}

<T> &Vec<T>:. {
    push(val: T) {
        ? self.len == u64 0 {
            *self = Vec<T> {
                len = u64 0,
                capacity = u64 4,
                data_loc = alloc<T>(u64 4)
            }
        }

        ? self.len >= self.capacity {
            # reallocate memory
            self.capacity = self.capacity * u64 2

            new_ptr: &T = alloc<T>(self.capacity)
            memmove<T>(self.data_loc, new_ptr, self.len * size_of<T>())
            free<T>(self.data_loc)

            self.data_loc = new_ptr
        }

        ptr: &T = self.data_loc + self.len
        *ptr = val
        
        self.len = self.len + u64 1
    }

    get(index: u64); T {
        ptr: &T = self.data_loc + index
        ; *ptr
    }

    get_ref(index: u64); &T {
        ptr: &T = self.data_loc + index
        ; ptr
    }
}

<T> Vec<T>:. {
    cast_as_bytes(); Vec<u8> {
        self.len = self.len * size_of<T>()
        self.cap = self.cap * size_of<T>()

        cast(self)
    }
}

<T> Vec<T>:: {
    new(); Vec<T> {
        new_vec: Vec<T> = Vec<T> {
            len = u64 0,
            capacity = u64 4,
            data_loc = cast<u64, &T>(u64 0),
        }

        ; new_vec
    }

    default(); Vec<T> {
        ; Vec<T>:new()
    }
}

<T> &Vec<T>:. {
    drop() {
        free<T>(self.data_loc)
    }
}
