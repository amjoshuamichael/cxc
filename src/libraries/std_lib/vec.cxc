Vec<T> = {
    capacity: i64,
    data_loc: &T,
    len: i64,
}

<T> &Vec<T>:. {
    push(val: T) {
        ? self.len >= self.capacity {
            # reallocate memory
            self.capacity = self.capacity * to_i64(2)

            new_ptr: &T = alloc<T>(self.capacity)
            memmove<T>(self.data_loc, new_ptr, self.len * size_of<T>())
            free<T>(self.data_loc)
            self.data_loc = new_ptr
        }

        ptr: &T = self.data_loc + self.len
        ptr.write<T>(val)
        
        self.len = self.len + to_i64(1)
    }

    get(index: i64); T {
        ptr: &T = self.data_loc + index
        ; *ptr
    }
}

<T> Vec<T>:: {
    new(); Vec<T> {
        new_vec: Vec<T> = 0
        new_vec.len = to_i64(0)
        new_vec.capacity = to_i64(4)
        new_vec.data_loc = alloc<T>(new_vec.capacity)

        ; new_vec
    }

    default(); Vec<T> {
        ; Vec<T>:new()
    }
}
