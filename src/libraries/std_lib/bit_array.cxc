BitArray<T> = {
    inner: NumOfSize(T),
}

<T> &BitArray<T>:. {
    get(index: Me.inner); bool {
        ; (self.inner & (Me.inner 1 << index)) > Me.inner 0
    }

    toggle(index: Me.inner) {
        self.inner = self.inner ^ (Me.inner 1 << index)
    }

    iter(); BitArrayIterator {
        ; BitArrayIterator {
            array = self,
            ++
        }
    }
}

<T> BitArray<T>:: {
    new(); BitArray<T> {
        ; 0
    }
}

BitArrayIterator<T> = {
    bitarray: &BitArray<T>,
    index: NumOfSize(T),
}

<T> &BitArrayIterator<T>:. {
    next(); Option<bool> {
        self.index = self.index + Me.index 1
        ; self.bitarray.get(self.index)
    }
}
