RcBox<T> = {
    strong: i64,
    weak: i64,
    +value: T,
} 

Rc<T> = {
    +box: &RcBox<T> ~ self.drop_reference()
}

<T> &RcBox<T>:. {
    inc_strong() {
        self.strong = self.strong + i64 1
    }

    drop_reference() {
        self.strong = self.strong - 1

        ? self.strong == 0 {
            ~self.value
            free(self)
        }
    }
}

<T> Rc<T>:: { 
    new(value: T); Rc<T> {
        box: &RcBox<T> = alloc< RcBox<T> >( i64 1 )

        *box = RcBox<T> { strong = i64 1, weak = i64 0, value = value }
        
        rc: Rc<T> = Rc<T> { box = box }

        ; rc
    }

    default(); Rc<T> {
        ; Rc<T>:new(T:default())
    }
}

<T> &Rc<T>:. { 
    deref(); &T {
        ptr: &T = &self.box.value
        ; ptr
    }

    to_string(); String {
        ; self.value.to_string()
    }

    clone(); *Me {
        self.box.inc_strong()
        ; *self
    }
}
